AppType=StandardJava
Build1=Default,com.luxtronik
Group=Default Group
Library1=jcore
Library10=jmqtt
Library11=json
Library12=xml2map
Library13=websocketclientlux
Library2=byteconverter
Library3=jrandomaccessfile
Library4=jnetwork
Library5=jserver
Library6=jsql
Library7=jdateutils
Library8=b4xcollections
Library9=javaobject
Module1=cConfig
Module2=cLuxCalculation
Module3=cLuxCalculations
Module4=cLuxParameter
Module5=cLuxTCPSocket
Module6=cLuxWebSocket
Module7=cLuxWSItem
Module8=logger
NumberOfFiles=0
NumberOfLibraries=13
NumberOfModules=8
Version=8.1
@EndOfDesignText@
#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
	#AdditionalJar: mariadb-java-client-2.5.2.jar
	#AdditionalJar: Java-WebSocket.jar
	#IgnoreWarnings: 15
#End Region

#if RELEASE
	#CustomBuildAction: 2, c:\windows\system32\cmd.exe,/C echo Cancelled build... && Exit /B 1
#end if

Sub Process_Globals
	Public Config     As cConfig
	Public BaseDir    As String
	
	Private pool As ConnectionPool	
	Private StreamBuffer As B4XBytesBuilder
	
	Private DataBase As String
	
	Private lux_Host     As String
	Private lux_Port     As Int
	Private lux_Timeout  As Int
	Private lux_TCP      As cLuxTCPSocket
	
	Private	lux_ParamSet As Boolean
	
	Private lux_WS_Enabled  As Boolean
	Private lux_WS_Host     As String
	Private lux_WS_Password As String
	Private lux_WS_Pin      As String
	Private lux_WS          As cLuxWebSocket
	
	Private mluxWSPages   As Map
	
	Private TimerConnect   As Timer
	Private TimerReload    As Timer
	Private TimerParamSet  As Timer
	Private TimerMQTT      As Timer


	Private IntervalConnect  As Int
	Private IntervalReload   As Int
	Private IntervalParamSet As Int
	Private IntervalMQTT     As Int
	
	
	Private mLuxCalcsMap   As Map
	Private mLuxCalcs      As Map
	Private mLuxParamsMap  As Map
	Private mLuxParams     As Map
	Private mLuxWSCalcMap   As Map
	Private mLuxWSParamMap  As Map
	Private mValueFmt      As Map
	Private 	mValueMap      As Map
	
	Private mqtt          As MqttClient
	Private mqtt_options  As MqttConnectOptions
	Private mqtt_server   As String
	Private mqtt_user     As String
	Private mqtt_password As String
	Private mqtt_clientid As String
	Private mqtt_topic    As String
	
	
	Public const VERSION As Float = 2.5
	
	Type LuxNumFmt(FormatString As String, Divisor As Double)
End Sub

Sub AppStart (Args() As String)
	BaseDir = File.DirApp	
	
	Log($"Luxtronik datalogger v$1.2{VERSION}"$)
	Log($"workin dir ${BaseDir}"$)
	
	
	If Config.Initialize("", "") = False Then
		LogError("config.properties is missing!")
		ExitApplication		
	End If
	
	' Einstellungen für den Logger
	logger.LogDir      = Config.GetString("LogDir", File.DirApp)
	logger.LogFile     = Config.GetString("LogFile", "luxtronik.log")
	logger.LogLevel    = Config.GetString("LogLevel", "ERROR")
	logger.LogFilesMax = Config.GetInt("LogFiles", 5)
	logger.LogSizeMax  = Config.GetInt("LogSize", 5 * 1024 * 1024)
	If Config.GetBoolean("LogRotate", True) =True Then logger.LogRotate   = True Else logger.LogRotate  = False
	If Config.GetBoolean("LogConsole", True)=True Then logger.LogConsole  = True Else logger.LogConsole  = False

	' Verbindungsdaten für die Datenbank
	DataBase = Config.GetString("Database", "mysql").ToLowerCase.Trim
	If DataBase="mysql" Then
	Try
		pool.Initialize(Config.GetString("DriverClass", ""), _
	    	            		Config.GetString("JdbcUrl", ""), _
						Config.GetString("Username", ""), _
						Config.GetString("Password", ""))
	Catch
		logger.wError("Unable to set connection!" & LastException.Message)
		ExitApplication
	End Try
	Else If DataBase="sqlite" Then
		If File.Exists(BaseDir, "luxtronik.db")=False Then
			File.Copy(File.DirAssets, "luxtronik.db", BaseDir, "luxtronik.db")
		End If
	Else
		logger.wError("Unkown DataBase Type!" & LastException.Message)
		ExitApplication
	End If
	
	' Teste Datenbank
	Try
		Dim SQL1 As SQL
		SQL1 = pool.GetConnection
	Catch
		logger.wError("Unable to conntect to database server!")
		logger.wError(LastException.Message)
		ExitApplication
	End Try
	' ToDo: Prüfen und ggf. Datenbank anlegen
	' TODO: Auto. Datenbank update bei Änderungen
	SQL1.Close
	
	' Verbindungsdaten Java Schnittstelle
	lux_Host     = Config.GetString("luxHost", "")
	lux_Port     = Config.GetInt("luxPort", 8888)
	lux_Timeout  = Config.GetInt("luxTimeout", 3)
	
	If lux_Port    = 0 Then lux_Port    = 8888
	If lux_Timeout = 0 Then lux_Timeout = 3
	If lux_Host = "" Then
		logger.wError("No Luxtronik Host set! Option: luxHost")
		ExitApplication
	End If
	
	
	' Verbindungsdaten WebSocket Schnittstelle
	lux_WS_Enabled  = Config.GetBoolean("luxWSEnable", False)
	lux_WS_Host     = Config.GetString("luxWSHost", "")
	lux_WS_Password = Config.GetString("luxWSPassword", "999999")
	lux_WS_Pin      = Config.GetString("luxWSPin", "9445")

	' MQTT
	If Config.GetBoolean("mqttEnable", False)=True Then
		mqtt_server   = Config.GetString("mqttServer", "")
		mqtt_user     = Config.GetString("mqttUser", "")
		mqtt_password = Config.GetString("mqttPassword", "")
		mqtt_clientid = Config.GetString("mqttClientID", "heatpump")
		mqtt_topic    = Config.GetString("mqttTopic", "heatpump")
		mqtt_options.Initialize(mqtt_user, mqtt_password)		
		mqtt.Initialize("MQTT", mqtt_server, mqtt_clientid)
		
		IntervalMQTT = Config.GetInt("mqttTelePeriod", 60)
		If IntervalMQTT<=10 Then IntervalMQTT = 10
		TimerMQTT.Initialize("MQTT", IntervalMQTT * 1000)
		TimerMQTT.Enabled = True
	End If
	
	' Allgemein
	IntervalConnect   =Config.GetInt("SyncInterval", 30)
	IntervalReload    =Config.GetInt("ParamsInterval", 300)
	If IntervalConnect=0  Then IntervalConnect = 30
	If IntervalReload =0  Then IntervalReload  = 300
	
	If Config.GetBoolean("luxParamSet", False)=True Then lux_ParamSet = True
	
	' Bei zu kurzen Werte diese erhöhen
	If IntervalConnect < 5 Then IntervalConnect = 5
	If IntervalReload  < 5 Then IntervalReload  = 5

	mLuxCalcsMap.Initialize
	mLuxCalcs.Initialize
	mLuxParamsMap.Initialize
	mLuxParams.Initialize
	mLuxWSCalcMap.Initialize
	mLuxWSParamMap.Initialize
	
	mluxWSPages.Initialize
	
	mValueMap.Initialize
	mValueFmt.Initialize
	
	StreamBuffer.Initialize
	
	lux_TCP.Initialize(Me, "Lux_TCP", lux_Host, lux_Port, lux_Port)
	lux_TCP.SetInterval(IntervalConnect*1000)
	
	If lux_WS_Enabled Then
		lux_WS.Initialize(Me, "Lux_WS")
		lux_WS.DoReconnect  = True
		lux_WS.RefreshTimer = 0
		lux_WS.Connect(lux_WS_Host, lux_WS_Password, lux_WS_Pin, 5000)
	End If
	
	TimerConnect.Initialize("TimerConnect", IntervalConnect*1000)
	TimerConnect.Enabled = True
	TimerReload.Initialize("TimerReload", IntervalReload*1000)
	
	IntervalParamSet = 10
	TimerParamSet.Initialize("TimerParamSet", IntervalParamSet*1000)
	TimerParamSet.Enabled = True

	CallSubDelayed(Me, "TimerReload_Tick")
	CallSubDelayed(Me, "TimerParamSet_Tick")
	StartMessageLoop
	
End Sub

Sub Application_Error (Error As Exception, StackTrace As String) As Boolean
	logger.wError(LastException.Message)
	logger.wError(StackTrace)
	Return False
End Sub

#Region mqtt
Sub MQTT_Tick
	Dim topic     As String
	Dim payload() As Byte
	Dim JsonG     As JSONGenerator
	Dim m1        As Map
	Dim calc      As cLuxCalculation
	Dim param     As cLuxParameter

	If mqtt.Connected=False Then
		mqtt.Connect2(mqtt_options)
		Wait For MQTT_Connected (Success As Boolean)
		If Success=False Then
			logger.wError("MQTT Unable to connect to server!")
			logger.wError(LastException.Message)
			Return
		End If
	End If
	logger.wInfo("MQTT publish")
	m1.Initialize
	For Each k As String In mLuxCalcs.Keys
		calc = mLuxCalcs.Get(k)
		If calc.MQTT Then
			m1.Put(k, calc.Value)
		End If
	Next
	JsonG.Initialize(m1)
	topic = $"tele/${mqtt_topic}/calculations"$
	payload = JsonG.ToString.GetBytes("UTF8")
	mqtt.Publish(topic, payload)
	
	m1.Clear
	For Each k As String In mLuxParams.Keys
		param = mLuxParams.Get(k)
		If param.MQTT Then
			m1.Put(k, param.Value)
		End If
	Next
	JsonG.Initialize(m1)
	topic = $"tele/${mqtt_topic}/parameters"$
	payload = JsonG.ToString.GetBytes("UTF8")
	mqtt.Publish(topic, payload)
End Sub

Sub MQTT_Disconnected
	
End Sub

Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Log($"MQTT: ${Topic} Payload ${Payload.Length}"$)
End Sub
#End Region

#Region Global Parameters
Sub TimerReload_Tick
	logger.wInfo("Reloading global parameters...")
	Dim SQL1 As SQL
	Dim rs1  As ResultSet
	Dim mValueFmtNew, mValuesMapNew, mCalcsNew, mCalcsMapNew, mParamsNew, mParamsMapNew As Map
	Dim mLuxWSCalcMapNew, mLuxWSParamMapNew As Map
	Dim now As Long = DateTime.Now
	Try
		Dim SQL1 As SQL
		SQL1 = pool.GetConnection
	Catch
		logger.wError("Unable to conntect to database server!")
		logger.wError(LastException.Message)
		Return
	End Try
	
	mValueFmtNew.Initialize
	mValuesMapNew.Initialize
	mCalcsNew.Initialize
	mCalcsMapNew.Initialize
	mLuxWSCalcMapNew.Initialize
	mLuxWSParamMapNew.Initialize

	mParamsNew.Initialize
	mParamsMapNew.Initialize
	
	Dim id, value As Int
	Dim text As String
	Dim key As String

	rs1 = SQL1.ExecQuery("SELECT * FROM valueformat")
	Do While rs1.NextRow
		Dim NumFmt1 As LuxNumFmt
		NumFmt1.Initialize
		NumFmt1.formatstring = rs1.GetString("formatstring")
		NumFmt1.divisor      = rs1.GetDouble("divisor")
		mValueFmtNew.Put(rs1.GetInt("id"), NumFmt1)
	Loop
	rs1.Close
	mValueFmt = mValueFmtNew
	
	Dim CalcOld As cLuxCalculation
	rs1 = SQL1.ExecQuery("SELECT * FROM calcs")
	Do While rs1.NextRow
		Dim Calc As cLuxCalculation
		If mLuxCalcs.ContainsKey(rs1.GetString("metric")) Then
			CalcOld = mLuxCalcs.Get(rs1.GetString("metric"))
		Else
			CalcOld.Initialize
		End If
		Calc.Initialize
		Calc.LuxID       = rs1.GetInt("luxid")
		Calc.WSPage      = rs1.GetString("wspage")
		Calc.WSContent   = rs1.GetString("wscontent")
		Calc.FormatID    = rs1.GetInt("formatid")
		Calc.MapID       = rs1.GetInt("mapid")
		If rs1.GetString("mqtt")="Y" Then Calc.MQTT = True Else Calc.MQTT = False
		
		Calc.MapID       = rs1.GetInt("mapid")
		Calc.Description = rs1.GetString("description")
		Calc.History_Interval = rs1.GetInt("history_interval")
		If CalcOld.History_LastSave>0 Then
			Calc.History_LastSave = CalcOld.History_LastSave
		Else
			Calc.History_LastSave = now
		End If	
		
		If rs1.GetString("history")="Y" Then Calc.History = True Else Calc.History = False
		mCalcsNew.Put(rs1.GetString("metric"), Calc)
		If Calc.LuxID     >0  Then mCalcsMapNew.Put(Calc.LuxID, rs1.GetString("metric"))
		If Calc.WSContent<>"" Then mLuxWSCalcMapNew.Put(Calc.WSPage & ":" & Calc.WSContent, rs1.GetString("metric"))
	Loop
	rs1.Close
	mLuxCalcs     = mCalcsNew
	mLuxCalcsMap  = mCalcsMapNew
	mLuxWSCalcMap = mLuxWSCalcMapNew

	rs1 = SQL1.ExecQuery("SELECT id, value, text FROM valuemap")
	Do While rs1.NextRow
		id    = rs1.GetInt("id")
		value = rs1.GetInt("value")
		text  = rs1.GetString("text")
		key = $"${id}:${value}"$
		mValuesMapNew.Put(key, text)
	Loop
	rs1.Close
	mValueMap = mValuesMapNew	
	
	rs1 = SQL1.ExecQuery("SELECT * FROM params")
	Do While rs1.NextRow
		Dim Param As cLuxParameter
		Param.Initialize
		Param.Metric  = rs1.GetString("metric")
		Param.LuxID   = rs1.GetInt("luxid")
		Param.WSPage    = rs1.GetString("wspage")
		Param.WSContent = rs1.GetString("wscontent")
		Param.Description = ""
		If rs1.GetString("mqtt")="Y" Then Param.MQTT = True Else Param.MQTT = False
		
		mParamsNew.Put(rs1.GetString("metric"), Param)
		
		If Param.LuxID    >0   Then mParamsMapNew.Put(Param.LuxID, rs1.GetString("metric"))
		If Param.WSContent<>"" Then mLuxWSParamMapNew.Put(Param.WSPage & ":" & Param.WSContent, rs1.GetString("metric"))
	Loop
	rs1.Close
	mLuxParams     = mParamsNew
	mLuxParamsMap  = mParamsMapNew
	mLuxWSParamMap = mLuxWSParamMapNew
	
	SQL1.Close
End Sub
#End Region

#Region ParamSet
Sub TimerParamSet_Tick
	Dim SQL1 As SQL
	Dim rs1  As ResultSet
	Dim Params As Map
	If lux_ParamSet=False Then Return
	Try
		SQL1 = pool.GetConnection
	Catch
		logger.wError("Unable to conntect to database!")
		logger.wError(LastException.Message)
		Return
	End Try
	
	Params.Initialize
	rs1 = SQL1.ExecQuery("SELECT * FROM paramset AS a INNER JOIN params b ON b.metric=a.metric WHERE changeat<=now()")
	Do While rs1.NextRow
		logger.wInfo($"Luxtronik SetParam ${rs1.GetInt("a.id")}  LuxID: ${rs1.GetString("a.metric")}:${rs1.GetInt("b.luxid")}=${rs1.GetInt("a.value")}"$)
		If rs1.GetInt("b.luxid")>0 Then
			Params.Put(rs1.GetInt("b.luxid"), rs1.GetInt("a.value"))
		End If
	Loop
	Wait For (lux_TCP.SendData(3002, Params)) Complete(Result As Boolean)
	If Result Then
		For Each k As String In Params.Keys
			SQL1.ExecNonQuery2("DELETE FROM paramset WHERE id=?", Array As String(k))
		Next
	End If	
	rs1.Close
	SQL1.Close
End Sub

#End Region

#Region LuxTCP
Sub Lux_TCP_NewData(OpCode As Int, Vals() As Int)
	Dim SQL1 As SQL
	logger.wInfo($"Luxtronik Lux_TCP_NewData (${OpCode})"$)
	SQL1 = SQLConnect
	If SQL1.IsInitialized Then
		Try
			If OpCode=3003 Then 	SendParamsDB(SQL1, Vals)
			If OpCode=3004 Then 	SendCalcsDB(SQL1, Vals)
			SQL1.Close
		Catch
			logger.wError("Unkown error in sub!")
			logger.wError(LastException.Message)
		End Try
	End If
End Sub

Sub SendParamsDB(SQL1 As SQL, data() As Int)	
	Dim metric As String
'	Dim now    As Long = DateTime.Now
	Dim value  As Double
	Dim text   As String

	SQL1.BeginTransaction
	SQL1.ExecNonQuery("DELETE FROM paramvals_unkown")
	For idx=0 To data.Length-1
		If mLuxParamsMap.ContainsKey(idx)=False Then
			SQL1.ExecNonQuery2("REPLACE INTO paramvals_unkown (luxid, value) VALUES (?, ?)" _
							 , Array As String (idx, data(idx)))
			Continue
		End If
		Dim Param As cLuxParameter
		Param.Initialize
		metric = mLuxParamsMap.Get(idx)
		If mLuxParams.ContainsKey(metric) Then
			Param = mLuxParams.Get(metric)
		End If
		value = data(idx)
		text  = ""
		SQL1.ExecNonQuery2("REPLACE INTO paramvals (metric, value, text) VALUES (?, ?, ?)" _
		                  ,Array As String (metric, value, text))
		Param.Value = value
		mLuxParams.Put(metric, Param)
	Next
	SQL1.TransactionSuccessful
End Sub

Sub SendCalcsDB(SQL1 As SQL, data() As Int)	
	Dim metric As String
	Dim value As Double
	Dim text As String
	Dim ticks As Float
	Dim now    As Long = DateTime.Now
	Dim p As Period
	
	p.Initialize


	Dim NumFormat1 As LuxNumFmt
	SQL1.BeginTransaction
	SQL1.ExecNonQuery("DELETE FROM calcvals_unkown")
	For idx=0 To data.Length-1
		If mLuxCalcsMap.ContainsKey(idx)=False Then 
			SQL1.ExecNonQuery2("REPLACE INTO calcvals_unkown (luxid, value) VALUES (?, ?)" _
							 , Array As String (idx, data(idx)))
			Continue
		End If
		Dim Calc As cLuxCalculation
		Calc.Initialize
		metric = mLuxCalcsMap.Get(idx)
		If mLuxCalcs.ContainsKey(metric) Then
			Calc = mLuxCalcs.Get(metric)
		End If
		
		value = data(idx)
		text  = ""
		If Calc.FormatID > 0 And mValueFmt.ContainsKey(Calc.FormatID) Then
			NumFormat1 = mValueFmt.Get(Calc.FormatID)
			Try
				If NumFormat1.Divisor<>0 Then value = value / NumFormat1.Divisor
			Catch
				logger.wError(LastException.Message)
			End Try
			text = NumFormat1.FormatString
		Else If Calc.MapID > 0 Then
			text = LuxValue2Text(Calc.MapID, value)
		Else
			text = value
		End If
		'TODO: Umsetzung %d und co. wie mit printf. Vorlage die sqlite Datenbank aus der letzten der FW 3.85.x
		'TODO: Verschiedene Formate für das Datum / Zeit
		If text.Contains("%DAYTIME") Then
			Try
				ticks = DateUtils.UnixTimeToTicks(value)
				text = text.Replace("%DAYTIME", DateTime.Date(ticks) & " " & DateTime.Time(ticks))
			Catch
				logger.wError($"Unable to convert unixtime to ticks! Index ${idx} Value ${value}"$)
				logger.wError(LastException.Message)
			End Try
		End If
		If text.Contains("%IP") Then
			Try
				text=LuxValue2IP(value)
			Catch
				logger.wError($"Unable to convert int to ip! Index ${idx} Value ${value}"$)
				logger.wError(LastException.Message)
			End Try
		End If
		If text.Contains("%SEC2TIME") Then
			text=LuxSecs2Time(value)
		End If
		If text.Contains("%") Then 
			text = format(text, Array(value))
'			text = text.Replace("%", value)
		End If

	
		SQL1.ExecNonQuery2("REPLACE INTO calcvals (metric, value, text) VALUES (?, ?, ?)" _
		                  ,Array As String (metric, value, text))
		If Calc.History Then
			p = DateUtils.PeriodBetween(Calc.History_LastSave, now) 
			If p.Seconds >= Calc.History_Interval Then 
				SQL1.ExecNonQuery2("INSERT INTO calcvals_history (ts, metric, value) VALUES (now(), ?, ?)" _
							  	   ,Array As String(metric, value))
				Calc.History_LastSave = now
			End If
		End If
		Calc.Value = value
		mLuxCalcs.Put(metric, Calc)
	Next
	
	' Software Version
	Dim sb As StringBuilder
	sb.Initialize
	For idx=81 To 90
		If data(idx)=0 Then Continue
		sb.Append(Chr(data(idx)))
	Next
	SQL1.ExecNonQuery2("REPLACE INTO calcvals (metric, value, text) VALUES (?, ?, ?)" _
		                  ,Array As String ("ID_WEB_SoftStand", 0, sb.ToString))


	' ToDo: Minuten umrechnen
	' Laufzeit Ø VD1
	If data(57)<>0 Then 	value = (data(56)/60/60)/data(57) Else value = 0
	SQL1.ExecNonQuery2("REPLACE INTO calcvals (metric, value, text) VALUES (?, ?, ?)" _
		                  ,Array As String ("ID_WEB_Zaehler_ImpulseVD1", value, value))
	' Laufzeit Ø VD2
	If data(59)<>0 Then 	value = (data(58)/60/60)/data(59) Else value = 0
	SQL1.ExecNonQuery2("REPLACE INTO calcvals (metric, value, text) VALUES (?, ?, ?)" _
		                  ,Array As String ("ID_WEB_Zaehler_ImpulseVD2", value, value))

	' Fehlermeldungen
	For idx=95 To 99
		ticks = data(idx)
		value = data(idx+5)
		text  = LuxValue2Text(95, value)
		SQL1.ExecNonQuery2("INSERT IGNORE INTO errorlog (ts, value, text) VALUES (FROM_UNIXTIME(?), ?, ?)" _
		                  ,Array As String (ticks, value, text))
	Next
	' Abschaltungen
	For idx=106 To 110
		ticks = data(idx+5)
		value = data(idx)
		text = LuxValue2Text(106, value)
		SQL1.ExecNonQuery2("INSERT IGNORE INTO switchoff (ts, value, text) VALUES (FROM_UNIXTIME(?), ?, ?)" _
		                  ,Array As String (ticks, value, text))
	Next

	SQL1.TransactionSuccessful
End Sub
#End Region

#Region WebSocket
Sub TimerConnect_Tick
	If lux_WS_Enabled And mluxWSPages.Size > 0 Then
		For Each k As String In mluxWSPages.Keys
			Wait For (lux_WS.LuxWSGetContent(mluxWSPages.Get(k), False)) Complete(result As Boolean)
		Next
	End If
End Sub

Sub LUX_WS_Navigation(mNavigation As Map)
	Dim SQL1 As SQL
	Dim MenuItem As cLuxWSItem
	Log("LUX_WS_Navigation")
	mluxWSPages = mNavigation
	SQL1 = SQLConnect
	If SQL1.IsInitialized Then
		SQL1.BeginTransaction
		SQL1.ExecNonQuery("DELETE FROM wspages")
		For Each k As String In mNavigation.Keys
			MenuItem = mNavigation.Get(k)
			SQL1.ExecNonQuery2("INSERT INTO wspages (id, rawdata) VALUES (?, ?)", Array As Object(MenuItem.ID2, MenuItem.RawData))
		Next
		SQL1.TransactionSuccessful
		SQL1.Close
	End If
End Sub

Sub Lux_WS_Content(MenuItem As cLuxWSItem, mContent As Map)
	Dim SQL1 As SQL
	Dim ContentItem As cLuxWSItem
	Dim WSKey As String
	Log("Lux_WS_Content")
	SQL1 = SQLConnect
	If SQL1.IsInitialized Then
		SQL1.BeginTransaction
'		SQL1.ExecNonQuery("DELETE FROM wscontent")
		For Each k As String In mContent.Keys
			ContentItem = mContent.Get(k)
			SQL1.ExecNonQuery2("INSERT INTO wscontent " & _
			                   "(id, pageid, value, valueraw, rawdata) " & _
							   "VALUES " & _
							   "(?, ?, ?, ?, ?) " & _
							   " ON DUPLICATE KEY UPDATE " & _
							   " value=?, valueraw=?, rawdata=?" _
							  , Array As Object( _
							  k, MenuItem.id2, ContentItem.Value, _
							  ContentItem.ValueRaw, ContentItem.RawData, _
							  ContentItem.Value, ContentItem.ValueRaw, _
							  ContentItem.RawData))
			WSKey = k & ":" & MenuItem.id2
			If mLuxWSCalcMap.ContainsKey(WSKey) Then
				Dim Calc As cLuxCalculation = mLuxCalcs.Get(mLuxWSCalcMap.Get(WSKey))
				Calc.Value = ContentItem.Value
				mLuxCalcs.Put(mLuxWSCalcMap.Get(WSKey), Calc)
			End If
			If mLuxParamsMap.ContainsKey(WSKey) Then
				Dim Param As cLuxCalculation = mLuxParams.Get(mLuxParamsMap.Get(WSKey))
				Param.Value = ContentItem.Value
				mLuxParams.Put(mLuxParamsMap.Get(WSKey), Param)
			End If
		Next
		SQL1.TransactionSuccessful
		SQL1.Close
	End If
	
End Sub
#End Region

Sub SQLConnect As SQL
	Dim SQL1 As SQL
	If DataBase="mysql" Then
		Try 
			SQL1 = pool.GetConnection
		Catch
			logger.wError("Unable to conntect to database!")
			logger.wError(LastException.Message)
		End Try
	Else IF DataBase="sqlite" Then
		SQL1.InitializeSQLite(BaseDir, "luxtronik.db", False)
		If SQL1.IsInitialized = False Then
			logger.wError("Unable to open database luxtronik.db!")
		End If
	End If
	Return SQL1
End Sub

Sub LuxValue2Text(id As Int, value As Int) As String
	Dim key  As String
	Dim text As String
	key=$"${id}:${value}"$
	If mValueMap.ContainsKey(key) Then text=mValueMap.Get(key)
	Return text
End Sub

Sub LuxValue2IP(value As Int) As String
	Dim b(4) As Byte
	Dim ip As String
	
	' Funktioniert mal überhaupt nicht
	b(0) = value & 0xFF
	b(1) = Bit.ShiftRight(value, 8) & 0xFF
	b(2) = Bit.ShiftRight(value, 16) & 0xFF
	b(3) = Bit.ShiftRight(value, 24) & 0xFF
	ip = b(3) & "." & b(2) & "." & b(1) & "." & b(0)
	Return ip
End Sub

Sub LuxSecs2Time(seconds As Int) As String
	Dim text As String
	seconds = seconds * DateTime.TicksPerSecond
	text  = Floor(seconds/DateTime.TicksPerHour Mod 24) _
	      & ":" & NumberFormat(Floor(seconds/DateTime.TicksPerMinute Mod 60), 2, 0) _
		  & ":" &  NumberFormat(Floor(seconds/DateTime.TicksPerSecond Mod 60), 2, 0)
'	text = format("%.2f h", Array(text))
	Return text
End Sub

Sub inline As JavaObject
	Return Me
End Sub
Sub format(f As String,a() As Object) As String
	Dim text As String
	Try
		text = inline.RunMethod("format",Array(f,a))
	Catch
		logger.wError(f)
		logger.wError(LastException.Message)
		text = text.Replace("%", a(0))
	End Try
	Return text
End Sub
#if java
import java.lang.String;

static public String format(String f,Object... args){
    return String.format(f,args);
}
#end if